---
layout: post
title: 和记忆的战斗
date: 2019-07-04 10:49:20 +0800
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
tags: [记忆, 遗忘, 不做狗熊掰玉米, 传承]
---

&emsp;&emsp;人的大脑是唯一不唯物的部分。前段时间迷《三体》，地球、太阳系、这些实体物质被包含在"太空"这个虚的空间内。在常识当中只有能被度量的东西才能被定义为存在，光速、气压、重力，虽然这些东西都是无法保存的，或者说经常被人忽视的，但无一例外这些东西都可以被度量。太空则不能，体积？起码人类目前的技术是无法探知的，如果日后有一天技术上可以探知了，或许太空也就需要个新名字了。

​	记忆或者说思想也是无法被度量的，并且这些东西左右着人们的行为，以无形的东西去创造（改造）有形的世界。就这两点来说，记忆和思想有点像太空。所以喜欢现在的职业，就是当初理想的认为自己可以创造一个小小的空间，里面又包含简单而明确的规则，这个有形的东西释放思想的价值，做这个小小空间的上帝，嘿嘿。

​	闲言少叙。可能是年龄大的缘故吧，觉得能记住的事情不太多了，所以只会选择很少重要的事去记忆。记忆空间这个东西很小、非常宝贵，所以我需要一个大的缓存，来帮我把目前不重要，但是以后可能需要唤起记忆的东西给存档一下。

一直觉得软件行业停留在手工作坊时代，和汽车行业的高度工业化相比拙略不堪。各种软件公司和高人开发出了不计其数的工具，目的就是让开发者能编写出高质量的软件产品，即便是这样高质量的软件产品依然凤毛麟角，在我看来，解决开发者的主观意识才是问题的首要，和汽车工业当中人的因素不同：在高度标准化、自动化的框架下，工人只要严格执行一些明确的规范（简单、直接，所以可量化），就可以生产出一辆可靠的汽车；反观软件产品，一个软件产品到底是5k行代码还是2w行代码开发出来的，基本上不太会有人会在意。

&emsp;&emsp;到底谁应该在意软件的非硬性质量（完成所有功能之后的后续问题）呢？产品经理、项目经理、CTO、还是股东？结论就是他们大概率都不会在意，所以守住这条底线的就是开发者本人，守住这条线就会和产品、设计诸多方面发生碰撞，如何协调平衡就变得很重要了，我认识的很多开发者其实都默默的妥协了，为的是减小无所谓的内耗。这么做的结果是什么呢？难以扩展、测试的代码，再加上不停的打补丁还有无休无止的加班，最终苦哈哈的完成了需求，得到的就是一句good work！技术债就是这么欠下去的。

&emsp;&emsp;记得乔布斯老爷子说过人人都应该学习编程，实际上是让大家熟悉一下机器的思维方式，学会某种严谨精确而又规范的表达方式交流，无论对机器还是对人。很多软件开发当中行之有效的实践，在我经历过的数家知名公司里都被摒弃了，举个例子：单元测试，像华为这样的企业是有覆盖率统计的。在谷歌和微软这样的公司，测试人员和开发人员的配比是非常低的，之所以可以做到就是很重视单元测试，而国内的公司测试和开发的配比相对较高，加上产品、设计也都或多或少的参与了测试这项工作。简而言之，如果公司的各个层面都切实了解软件开发的规范，于人力、财力都会有相当的降低。试想一下，如果测试开发配比由1:1降低到1:5，开发周期不变，bug数量降低1半，估计团队整个的心情都会愉悦很多。

&emsp;&emsp;可能有些人甚至包括部分开发人员会有种错觉，单元测试会降低开发效率，殊不知在增加了测试配比，以及反复运行调试自测验证debug的循环里时间被浪费着；由于缺乏单元测试，基本上没有人会有勇气重构的，所以我们的代码就会充斥着补丁，很快就能在项目当中看到3k-5k行的代码文件，既然无法重构那就只能继续打补丁，恶性循环会持续；这样下去开发效率会被拖慢，那怎么解决呢？继续招聘开发，要记得如果测试开发配比是1:1，那就还要增加一个测试。

&emsp;&emsp;上述问题就是很多公司人员规模不合理的变大。

&emsp;&emsp;如何彻底解决上面的问题呢？就是人人都该学习编程，接受合理的开发成本，规范软件开发这项活动，只有整个公司大家都充分认识了到了，才能有效提高公司效率，不要再认为编程开发只是程序员的事。

&emsp;&emsp;继续深入下去，很多UE/UI在制作动效和交互时不太有全局观，今天滑杆带个icon，明天带个title，殊不知对开发来说就是噩梦，可能有些同行会说你只要好好设计一下应该可以搞定，但是试想一下5个滑杆每个都有差别，并且10个地方应用哪个样式完全没有规律，是不是噩梦：）我的理解组件（滑杆、按钮之类的东西）和主题颜色是一样的，应该有个UI库，这样就能避免设计同学的灵光乍现，更能提高产品的统一性。如果UI/UE需要升级，首先升级UI库，而不是仅仅在某个界面做改动。

&emsp;&emsp;对产品人员和UE人员来说道理和UI是一样的，要保证功能的交互统一，这样用户的学习成本很低，开发的成本也可以降下来。我遇到过一个产品，很喜欢强调新功能，做法也很直接：气泡引导 + 功能演示，导致了功能提示很难做，不是A提示挡住了，就是B提示出来晚了。其实强导流是个风险很大的事：这么强的导流用户不得不看，看完了基本上都会试试，但是记住，这是在降低其他功能的使用率，如果这个新功能不被用户喜爱，结果就是用户会忽略其他已经适应的功能。另一点就是如果App的功能需要看介绍才能使用，是不是应该优化一下功能交互呢？我把自己当作一个用户来说：一个App的基础功能我是需要的，在其中发掘到高级功能就是进阶了，这也符合28原则，80%的需求都是被20%的功能满足的，80%的高级功能让用户自己发现岂不是更好？

&emsp;&emsp;总结一下，上面说了这么多就一个意思：你所在的公司是软件（互联网）公司，不论你是UI、产品、UE、HR甚至是CEO，最好大家都了解一下软件开发，不仅会让大家的沟通严谨和容易，更会优化企业的运转效率，所以“人人都该学习编程”。
